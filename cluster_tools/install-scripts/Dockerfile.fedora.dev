#
# This Dockerfile builds the development image of Kubernetes OVN CNI networking
# stack. It provides the OVN-Kubernetes CNI plugin (OVN-Kubernetes) and all the
# required binaries from OVN and OVS. By default OVN and OVS binaries are built
# using the master branch of the respective projects.
#
# NOTE:
# 1) Binaries are built using the version specified using OVN-BRANCH,
# OVS-BRANCH args below in the Dockerfile. By default the branch is set to
# master, so it will build OVN and OVS binaries from the master branch code.
# Please change the branch name if image needs to be build with different
# branch.
#
# 2) This image is only for development environment, so please DO NOT DEPLOY
# this image in any production environment.
#

FROM fedora:37 AS ovnbuilder

USER root

ENV PYTHONDONTWRITEBYTECODE yes

# Install tools that are required for building ovs/ovn.
RUN INSTALL_PKGS=" \
    python3-pyyaml bind-utils procps-ng openssl numactl-libs firewalld-filesystem \
    libpcap hostname util-linux\
    libunwind-devel libatomic \
    python3-pyOpenSSL perf \
    autoconf automake libtool g++ gcc fedora-packager rpmdevtools \
    unbound unbound-devel groff python3-sphinx graphviz openssl openssl-devel \
    checkpolicy libcap-ng-devel selinux-policy-devel systemtap-sdt-devel libbpf-devel libxdp-devel numactl-devel \
    iptables iproute iputils hostname unbound-libs kubernetes-client kmod" && \
    dnf install --best --refresh -y --setopt=tsflags=nodocs $INSTALL_PKGS

# Clone OVS Source Code.
#ARG OVS_REPO=https://github.com/vakabus/ovs.git
#ARG OVS_BRANCH=branch-3.1
WORKDIR /root

RUN mkdir -p /var/run/openvswitch

# Install ovn-kubernetes binaries
RUN mkdir -p /usr/libexec/cni/
COPY ovn-kubernetes/dist/images/ovnkube /usr/bin/
COPY ovn-kubernetes/dist/images/ovn-kube-util /usr/bin/
COPY ovn-kubernetes/dist/images/ovndbchecker /usr/bin/
COPY ovn-kubernetes/dist/images/ovn-k8s-cni-overlay /usr/libexec/cni/ovn-k8s-cni-overlay

# ovnkube.sh is the entry point. This script examines environment
# variables to direct operation and configure ovn.
COPY ovn-kubernetes/dist/images/ovnkube.sh /root/
COPY ovn-kubernetes/dist/images/ovndb-raft-functions.sh /root/
COPY ovn-kubernetes/dist/images/iptables-scripts /usr/sbin/

RUN getent group openvswitch >/dev/null || groupadd -r openvswitch
RUN getent passwd openvswitch >/dev/null || useradd -r -g openvswitch -d / -s /sbin/nologin -c "Open vSwitch Daemons" openvswitch


# Build OVS.
COPY ./ovs /root/ovs
WORKDIR /root/ovs
#RUN ./boot.sh && \
#    ./configure --prefix=/usr --libdir=/usr/lib64 --enable-usdt-probes CFLAGS="-g  -O2 -fno-omit-frame-pointer -msse2" && \
#    make && \
#    make install
RUN make install

# Build OVN
COPY ./ovn /root/ovn
WORKDIR /root/ovn/
#RUN ./boot.sh && \
#    ./configure --with-ovs-source=/root/ovs/ --prefix=/usr --libdir=/usr/lib64 && \
#    make && \
#    make install
RUN make install


LABEL io.k8s.display-name="ovn-kubernetes-master" \
      io.k8s.description="OVN based Kubernetes CNI Plugin stack. Image contains latest code of all the components in the stack (OVN-kubernetes, OVN, OVS)." \
      maintainer="Anil Vishnoi (vishnoianil@gmail.com)"

WORKDIR /root
ENTRYPOINT /root/ovnkube.sh
